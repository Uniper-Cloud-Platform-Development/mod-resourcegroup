---
  name: e2e test
  
  on:
    pull_request:
      types: ['opened', 'reopened', 'synchronize']
    merge_group:
    workflow_dispatch:
  
  permissions:
    contents: read
    id-token: write
  
  jobs:
    getexamples:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: ubuntu-latest
      outputs:
        examples: ${{ steps.getexamples.outputs.examples }}
      steps:
        - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #v4.2.1
        - name: get examples
          id: getexamples
          uses: Azure/terraform-azurerm-avm-template/.github/actions/e2e-getexamples@main
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
  
    testexamples:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: self-hosted
      needs: getexamples
      environment: test
      env:
        TF_IN_AUTOMATION: 1
        TF_VAR_enable_telemetry: false
      strategy:
        matrix:
          example: ${{ fromJson(needs.getexamples.outputs.examples) }}
        fail-fast: false
      steps:
        - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #v4.2.1
  
        - name: Test example
          shell: bash
          env:
            SECRETS_CONTEXT: ${{ toJson(secrets) }}
            VARS_CONTEXT: ${{ toJson(vars) }}
          run: |
            set -e
             MAX_RETRIES=10
            RETRY_COUNT=0
            until [ $RETRY_COUNT -ge $MAX_RETRIES ]
            do                                
              az login --identity > /dev/null && break
              RETRY_COUNT=$[$RETRY_COUNT+1]
              sleep 10
            done
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to login after $MAX_RETRIES attempts."
              exit 1
            fi
  
            declare -A secrets
            eval "$(echo $SECRETS_CONTEXT | jq -r 'to_entries[] | @sh "secrets[\(.key|tostring)]=\(.value|tostring)"')"
  
            declare -A variables
            eval "$(echo $VARS_CONTEXT | jq -r 'to_entries[] | @sh "variables[\(.key|tostring)]=\(.value|tostring)"')"
  
            for key in "${!secrets[@]}"; do
              if [[ $key = \TF_VAR_* ]]; then
                lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
                finalKey=${lowerKey/tf_var_/TF_VAR_}
                export "$finalKey"="${secrets[$key]}"
              fi
            done
  
            for key in "${!variables[@]}"; do
              if [[ $key = \TF_VAR_* ]]; then
                lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
                finalKey=${lowerKey/tf_var_/TF_VAR_}
                export "$finalKey"="${variables[$key]}"
              fi
            done
  
            echo -e "Custom environment variables:\n$(env | grep TF_VAR_ | grep -v ' "TF_VAR_')"
  
            export ARM_SUBSCRIPTION_ID=$(az login --identity --username $MSI_ID | jq -r '.[0] | .id')
            export ARM_TENANT_ID=$(az login --identity --username $MSI_ID | jq -r '.[0] | .tenantId')
            export ARM_CLIENT_ID=$(az identity list | jq -r --arg MSI_ID "$MSI_ID" '.[] | select(.principalId == $MSI_ID) | .clientId')
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src -w /src --network=host -e TF_IN_AUTOMATION -e TF_VAR_enable_telemetry -e AVM_MOD_PATH=/src -e AVM_EXAMPLE=${{ matrix.example }} -e MSI_ID -e ARM_SUBSCRIPTION_ID -e ARM_TENANT_ID -e ARM_CLIENT_ID -e ARM_USE_MSI=true --env-file <(env | grep TF_VAR_ | grep -v ' "TF_VAR_') mcr.microsoft.com/azterraform:latest make test-example
  
    # This job is only run when all the previous jobs are successful.
    # We can use it for PR validation to ensure all examples have completed.
    testexamplescomplete:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: ubuntu-latest
      needs: testexamples
      steps:
        - run: echo "All tests passed"


    #     # - name: Test example
    #     #   shell: cmd
    #     #   run: |
    #     #     echo "Running Bash version check via cmd"
    #     #     "C:/Program Files/Git/bin/bash.exe" --noprofile --norc --version

    #     - name: Create and run script via cmd
    #       shell: cmd
    #       env:
    #         TF_IN_AUTOMATION: 1
    #         TF_VAR_enable_telemetry: false
    #       run: |
    #         echo @echo off > run_bash_commands.bat
    #         echo echo Running Bash version check via cmd >> run_bash_commands.bat
    #         echo "C:/Program Files/Git/bin/bash.exe" --noprofile --norc --version >> run_bash_commands.bat
    #         echo echo Running additional commands in Git Bash >> run_bash_commands.bat
    #         echo "C:/Program Files/Git/bin/bash.exe" -c "ls -la" >> run_bash_commands.bat
    #         echo "C:/Program Files/Git/bin/bash.exe" -c "echo 'More commands can be added here!'" >> run_bash_commands.bat
    #         call run_bash_commands.bat


    #     # - name: Create and run script via cmd
    #     #   shell: cmd
    #     #   env:
    #     #     TF_IN_AUTOMATION: 1
    #     #     TF_VAR_enable_telemetry: false
    #     #   run: |
    #     #     echo @echo off > run_bash_commands.bat
    #     #     echo echo Running Bash version check via cmd >> run_bash_commands.bat
    #     #     echo "C:/Program Files/Git/bin/bash.exe" --noprofile --norc --version >> run_bash_commands.bat
    #     #     echo echo Running additional commands in Git Bash >> run_bash_commands.bat
    #     #     echo "C:/Program Files/Git/bin/bash.exe" -c "ls -la" >> run_bash_commands.bat
    #     #     echo echo Debugging: printing contents of bat file >> run_bash_commands.bat
    #     #     echo type run_bash_commands.bat >> run_bash_commands.bat
    #     #     call run_bash_commands.bat     
      

    #     #   shell: bash #"C:/Program Files/Git/bin/bash.exe" ## --noprofile --norc -e -o pipefail {0}"
    #     #  # env:
    #     # #    BASH_PATH: "C:/Program Files/Git/bin/bash.exe"
    #     #     #SECRETS_CONTEXT: ${{ toJson(secrets) }}
    #     #     #VARS_CONTEXT: ${{ toJson(vars) }}
    #     #   run: |
    #     #       echo "Running Bash version check"
    #     #       bash --version  # Prints the version of the current shell (bash)
            
    # #         MAX_RETRIES=10
    # #         RETRY_COUNT=0

    # #         until [ $RETRY_COUNT -ge $MAX_RETRIES ]
    # #         do
    # #           az login --identity --username "$MSI_ID" > /dev/null && break
    # #           RETRY_COUNT=$((RETRY_COUNT+1))
    # #           sleep 10
    # #         done

    # #         if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    # #           echo "Failed to login after $MAX_RETRIES attempts."
    # #           exit 1
    # #         fi

    # #         # Debugging environment variables
    # #         echo "SECRETS_CONTEXT: $SECRETS_CONTEXT"
    # #         echo "VARS_CONTEXT: $VARS_CONTEXT"

    # #         # Set environment variables from secrets and vars contexts
    # #         declare -A secrets
    # #         eval "$(echo $SECRETS_CONTEXT | jq -r 'to_entries[] | @sh "secrets[\(.key|tostring)]=\(.value|tostring)"')"

    # #         declare -A variables
    # #         eval "$(echo $VARS_CONTEXT | jq -r 'to_entries[] | @sh "variables[\(.key|tostring)]=\(.value|tostring)"')"

    # #         # Export transformed TF_VAR_* secrets
    # #         for key in "${!secrets[@]}"; do
    # #           if [[ $key == TF_VAR_* ]]; then
    # #             lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
    # #             finalKey=${lowerKey/tf_var_/TF_VAR_}
    # #             export "$finalKey"="${secrets[$key]}"
    # #             echo "Exporting $finalKey from secrets"
    # #           fi
    # #         done

    # #         # Export transformed TF_VAR_* variables
    # #         for key in "${!variables[@]}"; do
    # #           if [[ $key == TF_VAR_* ]]; then
    # #             lowerKey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
    # #             finalKey=${lowerKey/tf_var_/TF_VAR_}
    # #             export "$finalKey"="${variables[$key]}"
    # #             echo "Exporting $finalKey from variables"
    # #           fi
    # #         done

    # #         # Debug environment variables
    # #         echo "Debugging MSI_ID and ARM_* variables:"
    # #         echo "MSI_ID: $MSI_ID"
    # #         echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
    # #         echo "ARM_TENANT_ID: $ARM_TENANT_ID"
    # #         echo "ARM_CLIENT_ID: $ARM_CLIENT_ID"

    # #         # Use az account show instead of logging in again
    # #         export ARM_SUBSCRIPTION_ID=$(az account show --query 'id' -o tsv)
    # #         export ARM_TENANT_ID=$(az account show --query 'tenantId' -o tsv)

    # #         # Get the ARM_CLIENT_ID using az identity list
    # #         export ARM_CLIENT_ID=$(az identity list --query "[?principalId=='$MSI_ID'].clientId" -o tsv)

    # #         # Additional Debugging: Check if paths are valid
    # #         echo "Checking paths:"
    # #         if [ -d /mnt/c/Uniper/azureverifiedmodules/mod-resourcegroup ]; then
    # #           echo "Path exists: /mnt/c/Uniper/azureverifiedmodules/mod-resourcegroup"
    # #         else
    # #           echo "Path does not exist: /mnt/c/Uniper/azureverifiedmodules/mod-resourcegroup"
    # #         fi

    # #         # Docker Debugging Run
    # #         echo "Running Docker command..."

    # #         docker run --rm \
    # #           -v /mnt/c/Uniper/azureverifiedmodules/mod-resourcegroup:/src \
    # #           -w /src \
    # #           --network=host \
    # #           -e TF_IN_AUTOMATION \
    # #           -e TF_VAR_enable_telemetry \
    # #           -e AVM_MOD_PATH=/src \
    # #           -e AVM_EXAMPLE=complete \
    # #           -e MSI_ID="$MSI_ID" \
    # #           -e ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID" \
    # #           -e ARM_TENANT_ID="$ARM_TENANT_ID" \
    # #           -e ARM_CLIENT_ID="$ARM_CLIENT_ID" \
    # #           -e ARM_USE_MSI=true \
    # #           --env-file <(env | grep TF_VAR_ | grep -v ' "TF_VAR_') \
    # #           mcr.microsoft.com/azterraform:latest make test-example
  
    # # testexamplescomplete:
    # #   if: github.event.repository.name != 'terraform-azurerm-avm-template'
    # #   runs-on: ubuntu-latest
    # #   needs: testexamples
    # #   steps:
    # #     - run: echo "All tests passed"