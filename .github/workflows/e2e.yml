name: e2e test

on:
  pull_request:
    types: ['opened', 'reopened', 'synchronize']
  merge_group:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  getexamples:
    if: github.event.repository.name != 'terraform-azurerm-avm-template'
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.getexamples.outputs.examples }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.7

      - name: Get examples
        id: getexamples
        uses: Azure/terraform-azurerm-avm-template/.github/actions/e2e-getexamples@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  testexamples:
    if: github.event.repository.name != 'terraform-azurerm-avm-template'
    runs-on: windows-latest
    needs: getexamples
    environment: test
    env:
      TF_IN_AUTOMATION: 1
      TF_VAR_enable_telemetry: false
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    strategy:
      matrix:
        example: ${{ fromJson(needs.getexamples.outputs.examples) }}
      fail-fast: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.7

      - name: Set up Terraform on Windows
        shell: powershell
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          choco install terraform -y

      - name: Initialize Terraform for example
        shell: cmd  # Use cmd shell for Windows
        run: terraform init -reconfigure
        working-directory: ${{ matrix.example }}

      - name: Validate Terraform example
        shell: cmd
        run: terraform validate
        working-directory: ${{ matrix.example }}

      - name: Plan Terraform example
        shell: cmd
        run: terraform plan -input=false -out=tfplan
        working-directory: ${{ matrix.example }}

      - name: Apply Terraform example
        shell: cmd
        run: terraform apply -input=false tfplan
        working-directory: ${{ matrix.example }}

      - name: Destroy Terraform example
        if: always()
        shell: cmd
        run: terraform destroy -auto-approve
        working-directory: ${{ matrix.example }}

  testexamplescomplete:
    if: github.event.repository.name != 'terraform-azurerm-avm-template'
    runs-on: windows-latest
    needs: testexamples
    steps:
      - run: echo "All tests passed"
