---
  name: e2e test
  
  on:
    pull_request:
      types: ['opened', 'reopened', 'synchronize']
    merge_group:
    workflow_dispatch:
  
  permissions:
    contents: read
    id-token: write
  
  jobs:
    getexamples:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: ubuntu-latest
      outputs:
        examples: ${{ steps.getexamples.outputs.examples }}
      steps:
        - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4.1.7
        - name: get examples
          id: getexamples
          uses: Azure/terraform-azurerm-avm-template/.github/actions/e2e-getexamples@main
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
  
    testexamples:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: self-hosted
      needs: getexamples
      environment: test
      env:  
        TF_IN_AUTOMATION: 1
        TF_VAR_enable_telemetry: false
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      strategy:
        matrix:
          example:
            - "examples/complete"
            - "examples/default"
        fail-fast: false
      steps:
        - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4.1.7
  
        # Install Git on Windows before running Terraform commands
        - name: Install Git on Windows
          run: |
            # Define the URL of the Git installer
            #$gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.40.1.windows.1/Git-2.40.1-64-bit.exe"
            
            # Define the path to save the installer
            $installerPath = "c:\temp\Git-2.40.1-64-bit.exe"
            
            # Download the Git installer
            #Write-Output "Downloading Git installer from: $gitInstallerUrl"
            #Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $installerPath -UseBasicParsing
  
            # Run the installer silently
            Write-Output "Installing Git silently..."
            Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -NoNewWindow -Wait
  
            # Verify Git installation
            if (Get-Command git -ErrorAction SilentlyContinue) {
              Write-Output "Git installation successful!"
              git --version
            } else {
              Write-Output "Git installation failed or Git is not in PATH."
              exit 1
            }
  
            # Remove the installer after installation
            Write-Output "Cleaning up the installer..."
            Remove-Item -Path $installerPath -Force
          shell: powershell
  
        # Set up Terraform on Windows
        - name: Set up Terraform on Windows
          run: |
            Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
              iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            }
            choco install terraform -y
            terraform -version
          shell: powershell
  
        - name: Initialize Terraform for example
          run: |
            terraform init -backend=false -reconfigure
          working-directory: ${{ matrix.example }}
  
        - name: Validate Terraform example
          run: |
            terraform validate
          working-directory: ${{ matrix.example }}
  
        - name: Plan Terraform example
          run: |
            terraform plan -input=false -out=tfplan
          working-directory: ${{ matrix.example }}
  
        - name: Apply Terraform example
          run: |
            terraform apply -input=false tfplan
          working-directory: ${{ matrix.example }}
  
        - name: Destroy Terraform example
          if: always()
          run: |
            terraform destroy -auto-approve
          working-directory: ${{ matrix.example }}
  
    testexamplescomplete:
      if: github.event.repository.name != 'terraform-azurerm-avm-template'
      runs-on: ubuntu-latest
      needs: testexamples
      steps:
        - run: echo "All tests passed"
  